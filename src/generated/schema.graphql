### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


input BooleanFilter {
  equals: Boolean
  not: Boolean
}

scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

type Environment {
  id: ID!
  name: String!
  organization: Organization!
}

input EnvironmentCreateInput {
  id: ID
  name: String!
  organization: OrganizationCreateOneWithoutOrganizationInput!
  switch: SwitchCreateOneWithoutSwitchInput
}

input EnvironmentCreateManyWithoutEnvironmentsInput {
  connect: [EnvironmentWhereUniqueInput!]
  create: [EnvironmentCreateWithoutOrganizationInput!]
}

input EnvironmentCreateWithoutOrganizationInput {
  id: ID
  name: String!
  switch: SwitchCreateOneWithoutSwitchInput
}

input EnvironmentCreateWithoutSwitchInput {
  id: ID
  name: String!
  organization: OrganizationCreateOneWithoutOrganizationInput!
}

input EnvironmentFilter {
  every: EnvironmentWhereInput
  none: EnvironmentWhereInput
  some: EnvironmentWhereInput
}

input EnvironmentScalarWhereInput {
  AND: [EnvironmentScalarWhereInput!]
  id: StringFilter
  name: StringFilter
  NOT: [EnvironmentScalarWhereInput!]
  OR: [EnvironmentScalarWhereInput!]
}

input EnvironmentUpdateManyDataInput {
  id: ID
  name: String
}

input EnvironmentUpdateManyWithoutOrganizationInput {
  connect: [EnvironmentWhereUniqueInput!]
  create: [EnvironmentCreateWithoutOrganizationInput!]
  delete: [EnvironmentWhereUniqueInput!]
  deleteMany: [EnvironmentScalarWhereInput!]
  disconnect: [EnvironmentWhereUniqueInput!]
  set: [EnvironmentWhereUniqueInput!]
  update: [EnvironmentUpdateWithWhereUniqueWithoutOrganizationInput!]
  updateMany: [EnvironmentUpdateManyWithWhereNestedInput!]
  upsert: [EnvironmentUpsertWithWhereUniqueWithoutOrganizationInput!]
}

input EnvironmentUpdateManyWithoutSwitchInput {
  connect: [EnvironmentWhereUniqueInput!]
  create: [EnvironmentCreateWithoutSwitchInput!]
  delete: [EnvironmentWhereUniqueInput!]
  deleteMany: [EnvironmentScalarWhereInput!]
  disconnect: [EnvironmentWhereUniqueInput!]
  set: [EnvironmentWhereUniqueInput!]
  update: [EnvironmentUpdateWithWhereUniqueWithoutSwitchInput!]
  updateMany: [EnvironmentUpdateManyWithWhereNestedInput!]
  upsert: [EnvironmentUpsertWithWhereUniqueWithoutSwitchInput!]
}

input EnvironmentUpdateManyWithWhereNestedInput {
  data: EnvironmentUpdateManyDataInput!
  where: EnvironmentScalarWhereInput!
}

input EnvironmentUpdateWithoutOrganizationDataInput {
  id: ID
  name: String
  switch: SwitchUpdateOneWithoutEnvironmentsInput
}

input EnvironmentUpdateWithoutSwitchDataInput {
  id: ID
  name: String
  organization: OrganizationUpdateOneRequiredWithoutEnvironmentsInput
}

input EnvironmentUpdateWithWhereUniqueWithoutOrganizationInput {
  data: EnvironmentUpdateWithoutOrganizationDataInput!
  where: EnvironmentWhereUniqueInput!
}

input EnvironmentUpdateWithWhereUniqueWithoutSwitchInput {
  data: EnvironmentUpdateWithoutSwitchDataInput!
  where: EnvironmentWhereUniqueInput!
}

input EnvironmentUpsertWithWhereUniqueWithoutOrganizationInput {
  create: EnvironmentCreateWithoutOrganizationInput!
  update: EnvironmentUpdateWithoutOrganizationDataInput!
  where: EnvironmentWhereUniqueInput!
}

input EnvironmentUpsertWithWhereUniqueWithoutSwitchInput {
  create: EnvironmentCreateWithoutSwitchInput!
  update: EnvironmentUpdateWithoutSwitchDataInput!
  where: EnvironmentWhereUniqueInput!
}

input EnvironmentWhereInput {
  AND: [EnvironmentWhereInput!]
  id: StringFilter
  name: StringFilter
  NOT: [EnvironmentWhereInput!]
  OR: [EnvironmentWhereInput!]
  organization: OrganizationWhereInput
  switch: SwitchWhereInput
}

input EnvironmentWhereUniqueInput {
  id: ID
}

type Mutation {
  createOneEnvironment(data: EnvironmentCreateInput!): Environment!
  createOneOrganization(data: OrganizationCreateInput!): Organization!
  createOneSwitch(data: SwitchCreateInput!): Switch!
  deleteOneEnvironment(where: EnvironmentWhereUniqueInput!): Environment
  deleteOneSwitch(where: SwitchWhereUniqueInput!): Switch
  updateOneSwitch(data: SwitchUpdateInput!, where: SwitchWhereUniqueInput!): Switch
}

type Organization {
  id: ID!
  name: String!
}

input OrganizationCreateInput {
  environments: EnvironmentCreateManyWithoutEnvironmentsInput
  id: ID
  name: String!
  switches: SwitchCreateManyWithoutSwitchesInput
}

input OrganizationCreateOneWithoutOrganizationInput {
  connect: OrganizationWhereUniqueInput
  create: OrganizationCreateWithoutSwitchesInput
}

input OrganizationCreateWithoutEnvironmentsInput {
  id: ID
  name: String!
  switches: SwitchCreateManyWithoutSwitchesInput
}

input OrganizationCreateWithoutSwitchesInput {
  environments: EnvironmentCreateManyWithoutEnvironmentsInput
  id: ID
  name: String!
}

input OrganizationUpdateOneRequiredWithoutEnvironmentsInput {
  connect: OrganizationWhereUniqueInput
  create: OrganizationCreateWithoutEnvironmentsInput
  update: OrganizationUpdateWithoutEnvironmentsDataInput
  upsert: OrganizationUpsertWithoutEnvironmentsInput
}

input OrganizationUpdateOneRequiredWithoutSwitchesInput {
  connect: OrganizationWhereUniqueInput
  create: OrganizationCreateWithoutSwitchesInput
  update: OrganizationUpdateWithoutSwitchesDataInput
  upsert: OrganizationUpsertWithoutSwitchesInput
}

input OrganizationUpdateWithoutEnvironmentsDataInput {
  id: ID
  name: String
  switches: SwitchUpdateManyWithoutOrganizationInput
}

input OrganizationUpdateWithoutSwitchesDataInput {
  environments: EnvironmentUpdateManyWithoutOrganizationInput
  id: ID
  name: String
}

input OrganizationUpsertWithoutEnvironmentsInput {
  create: OrganizationCreateWithoutEnvironmentsInput!
  update: OrganizationUpdateWithoutEnvironmentsDataInput!
}

input OrganizationUpsertWithoutSwitchesInput {
  create: OrganizationCreateWithoutSwitchesInput!
  update: OrganizationUpdateWithoutSwitchesDataInput!
}

input OrganizationWhereInput {
  AND: [OrganizationWhereInput!]
  environments: EnvironmentFilter
  id: StringFilter
  name: StringFilter
  NOT: [OrganizationWhereInput!]
  OR: [OrganizationWhereInput!]
  switches: SwitchFilter
}

input OrganizationWhereUniqueInput {
  id: ID
}

type Query {
  organization(where: OrganizationWhereUniqueInput!): Organization
  switch(where: SwitchWhereUniqueInput!): Switch
  switches(after: ID, before: ID, first: Int, last: Int, skip: Int, where: QuerySwitchesWhereInput): [Switch!]!
}

input QuerySwitchesWhereInput {
  environments: EnvironmentFilter
  organization: OrganizationWhereInput
  type: SwitchType
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type Switch {
  createdAt: DateTime!
  defaultVariant: Variant
  enabled: Boolean!
  environments(after: ID, before: ID, first: Int, last: Int, skip: Int): [Environment!]!
  id: ID!
  key: String!
  name: String!
  organization: Organization!
  type: SwitchType!
  updatedAt: DateTime!
  variants(after: ID, before: ID, first: Int, last: Int, skip: Int): [Variant!]!
}

input SwitchCreateInput {
  createdAt: DateTime
  defaultVariant: VariantCreateOneWithoutDefaultVariantInput
  enabled: Boolean
  environments: EnvironmentCreateManyWithoutEnvironmentsInput
  id: ID
  key: String!
  name: String!
  organization: OrganizationCreateOneWithoutOrganizationInput!
  type: SwitchType!
  updatedAt: DateTime
  variants: VariantCreateManyWithoutVariantsInput
}

input SwitchCreateManyWithoutSwitchesInput {
  connect: [SwitchWhereUniqueInput!]
  create: [SwitchCreateWithoutDefaultVariantInput!]
}

input SwitchCreateOneWithoutSwitchInput {
  connect: SwitchWhereUniqueInput
  create: SwitchCreateWithoutEnvironmentsInput
}

input SwitchCreateWithoutDefaultVariantInput {
  createdAt: DateTime
  enabled: Boolean
  environments: EnvironmentCreateManyWithoutEnvironmentsInput
  id: ID
  key: String!
  name: String!
  organization: OrganizationCreateOneWithoutOrganizationInput!
  type: SwitchType!
  updatedAt: DateTime
  variants: VariantCreateManyWithoutVariantsInput
}

input SwitchCreateWithoutEnvironmentsInput {
  createdAt: DateTime
  defaultVariant: VariantCreateOneWithoutDefaultVariantInput
  enabled: Boolean
  id: ID
  key: String!
  name: String!
  organization: OrganizationCreateOneWithoutOrganizationInput!
  type: SwitchType!
  updatedAt: DateTime
  variants: VariantCreateManyWithoutVariantsInput
}

input SwitchCreateWithoutOrganizationInput {
  createdAt: DateTime
  defaultVariant: VariantCreateOneWithoutDefaultVariantInput
  enabled: Boolean
  environments: EnvironmentCreateManyWithoutEnvironmentsInput
  id: ID
  key: String!
  name: String!
  type: SwitchType!
  updatedAt: DateTime
  variants: VariantCreateManyWithoutVariantsInput
}

input SwitchCreateWithoutVariantsInput {
  createdAt: DateTime
  defaultVariant: VariantCreateOneWithoutDefaultVariantInput
  enabled: Boolean
  environments: EnvironmentCreateManyWithoutEnvironmentsInput
  id: ID
  key: String!
  name: String!
  organization: OrganizationCreateOneWithoutOrganizationInput!
  type: SwitchType!
  updatedAt: DateTime
}

input SwitchFilter {
  every: SwitchWhereInput
  none: SwitchWhereInput
  some: SwitchWhereInput
}

input SwitchScalarWhereInput {
  AND: [SwitchScalarWhereInput!]
  createdAt: DateTimeFilter
  enabled: BooleanFilter
  environments: EnvironmentFilter
  id: StringFilter
  key: StringFilter
  name: StringFilter
  NOT: [SwitchScalarWhereInput!]
  OR: [SwitchScalarWhereInput!]
  type: SwitchType
  updatedAt: DateTimeFilter
  variants: VariantFilter
}

enum SwitchType {
  Boolean
  Multi
}

input SwitchUpdateInput {
  createdAt: DateTime
  defaultVariant: VariantUpdateOneWithoutSwitchesInput
  enabled: Boolean
  environments: EnvironmentUpdateManyWithoutSwitchInput
  id: ID
  key: String
  name: String
  organization: OrganizationUpdateOneRequiredWithoutSwitchesInput
  type: SwitchType
  updatedAt: DateTime
  variants: VariantUpdateManyWithoutSwitchInput
}

input SwitchUpdateManyDataInput {
  createdAt: DateTime
  enabled: Boolean
  id: ID
  key: String
  name: String
  type: SwitchType
  updatedAt: DateTime
}

input SwitchUpdateManyWithoutDefaultVariantInput {
  connect: [SwitchWhereUniqueInput!]
  create: [SwitchCreateWithoutDefaultVariantInput!]
  delete: [SwitchWhereUniqueInput!]
  deleteMany: [SwitchScalarWhereInput!]
  disconnect: [SwitchWhereUniqueInput!]
  set: [SwitchWhereUniqueInput!]
  update: [SwitchUpdateWithWhereUniqueWithoutDefaultVariantInput!]
  updateMany: [SwitchUpdateManyWithWhereNestedInput!]
  upsert: [SwitchUpsertWithWhereUniqueWithoutDefaultVariantInput!]
}

input SwitchUpdateManyWithoutOrganizationInput {
  connect: [SwitchWhereUniqueInput!]
  create: [SwitchCreateWithoutOrganizationInput!]
  delete: [SwitchWhereUniqueInput!]
  deleteMany: [SwitchScalarWhereInput!]
  disconnect: [SwitchWhereUniqueInput!]
  set: [SwitchWhereUniqueInput!]
  update: [SwitchUpdateWithWhereUniqueWithoutOrganizationInput!]
  updateMany: [SwitchUpdateManyWithWhereNestedInput!]
  upsert: [SwitchUpsertWithWhereUniqueWithoutOrganizationInput!]
}

input SwitchUpdateManyWithWhereNestedInput {
  data: SwitchUpdateManyDataInput!
  where: SwitchScalarWhereInput!
}

input SwitchUpdateOneWithoutEnvironmentsInput {
  connect: SwitchWhereUniqueInput
  create: SwitchCreateWithoutEnvironmentsInput
  delete: Boolean
  disconnect: Boolean
  update: SwitchUpdateWithoutEnvironmentsDataInput
  upsert: SwitchUpsertWithoutEnvironmentsInput
}

input SwitchUpdateOneWithoutVariantsInput {
  connect: SwitchWhereUniqueInput
  create: SwitchCreateWithoutVariantsInput
  delete: Boolean
  disconnect: Boolean
  update: SwitchUpdateWithoutVariantsDataInput
  upsert: SwitchUpsertWithoutVariantsInput
}

input SwitchUpdateWithoutDefaultVariantDataInput {
  createdAt: DateTime
  enabled: Boolean
  environments: EnvironmentUpdateManyWithoutSwitchInput
  id: ID
  key: String
  name: String
  organization: OrganizationUpdateOneRequiredWithoutSwitchesInput
  type: SwitchType
  updatedAt: DateTime
  variants: VariantUpdateManyWithoutSwitchInput
}

input SwitchUpdateWithoutEnvironmentsDataInput {
  createdAt: DateTime
  defaultVariant: VariantUpdateOneWithoutSwitchesInput
  enabled: Boolean
  id: ID
  key: String
  name: String
  organization: OrganizationUpdateOneRequiredWithoutSwitchesInput
  type: SwitchType
  updatedAt: DateTime
  variants: VariantUpdateManyWithoutSwitchInput
}

input SwitchUpdateWithoutOrganizationDataInput {
  createdAt: DateTime
  defaultVariant: VariantUpdateOneWithoutSwitchesInput
  enabled: Boolean
  environments: EnvironmentUpdateManyWithoutSwitchInput
  id: ID
  key: String
  name: String
  type: SwitchType
  updatedAt: DateTime
  variants: VariantUpdateManyWithoutSwitchInput
}

input SwitchUpdateWithoutVariantsDataInput {
  createdAt: DateTime
  defaultVariant: VariantUpdateOneWithoutSwitchesInput
  enabled: Boolean
  environments: EnvironmentUpdateManyWithoutSwitchInput
  id: ID
  key: String
  name: String
  organization: OrganizationUpdateOneRequiredWithoutSwitchesInput
  type: SwitchType
  updatedAt: DateTime
}

input SwitchUpdateWithWhereUniqueWithoutDefaultVariantInput {
  data: SwitchUpdateWithoutDefaultVariantDataInput!
  where: SwitchWhereUniqueInput!
}

input SwitchUpdateWithWhereUniqueWithoutOrganizationInput {
  data: SwitchUpdateWithoutOrganizationDataInput!
  where: SwitchWhereUniqueInput!
}

input SwitchUpsertWithoutEnvironmentsInput {
  create: SwitchCreateWithoutEnvironmentsInput!
  update: SwitchUpdateWithoutEnvironmentsDataInput!
}

input SwitchUpsertWithoutVariantsInput {
  create: SwitchCreateWithoutVariantsInput!
  update: SwitchUpdateWithoutVariantsDataInput!
}

input SwitchUpsertWithWhereUniqueWithoutDefaultVariantInput {
  create: SwitchCreateWithoutDefaultVariantInput!
  update: SwitchUpdateWithoutDefaultVariantDataInput!
  where: SwitchWhereUniqueInput!
}

input SwitchUpsertWithWhereUniqueWithoutOrganizationInput {
  create: SwitchCreateWithoutOrganizationInput!
  update: SwitchUpdateWithoutOrganizationDataInput!
  where: SwitchWhereUniqueInput!
}

input SwitchWhereInput {
  AND: [SwitchWhereInput!]
  createdAt: DateTimeFilter
  defaultVariant: VariantWhereInput
  enabled: BooleanFilter
  environments: EnvironmentFilter
  id: StringFilter
  key: StringFilter
  name: StringFilter
  NOT: [SwitchWhereInput!]
  OR: [SwitchWhereInput!]
  organization: OrganizationWhereInput
  type: SwitchType
  updatedAt: DateTimeFilter
  variants: VariantFilter
}

input SwitchWhereUniqueInput {
  id: ID
}

type Variant {
  id: ID!
  value: String!
}

input VariantCreateManyWithoutVariantsInput {
  connect: [VariantWhereUniqueInput!]
  create: [VariantCreateWithoutSwitchInput!]
}

input VariantCreateOneWithoutDefaultVariantInput {
  connect: VariantWhereUniqueInput
  create: VariantCreateWithoutSwitchesInput
}

input VariantCreateWithoutSwitchesInput {
  id: ID
  switch: SwitchCreateOneWithoutSwitchInput
  value: String!
}

input VariantCreateWithoutSwitchInput {
  id: ID
  switches: SwitchCreateManyWithoutSwitchesInput
  value: String!
}

input VariantFilter {
  every: VariantWhereInput
  none: VariantWhereInput
  some: VariantWhereInput
}

input VariantScalarWhereInput {
  AND: [VariantScalarWhereInput!]
  id: StringFilter
  NOT: [VariantScalarWhereInput!]
  OR: [VariantScalarWhereInput!]
  switches: SwitchFilter
  value: StringFilter
}

input VariantUpdateManyDataInput {
  id: ID
  value: String
}

input VariantUpdateManyWithoutSwitchInput {
  connect: [VariantWhereUniqueInput!]
  create: [VariantCreateWithoutSwitchInput!]
  delete: [VariantWhereUniqueInput!]
  deleteMany: [VariantScalarWhereInput!]
  disconnect: [VariantWhereUniqueInput!]
  set: [VariantWhereUniqueInput!]
  update: [VariantUpdateWithWhereUniqueWithoutSwitchInput!]
  updateMany: [VariantUpdateManyWithWhereNestedInput!]
  upsert: [VariantUpsertWithWhereUniqueWithoutSwitchInput!]
}

input VariantUpdateManyWithWhereNestedInput {
  data: VariantUpdateManyDataInput!
  where: VariantScalarWhereInput!
}

input VariantUpdateOneWithoutSwitchesInput {
  connect: VariantWhereUniqueInput
  create: VariantCreateWithoutSwitchesInput
  delete: Boolean
  disconnect: Boolean
  update: VariantUpdateWithoutSwitchesDataInput
  upsert: VariantUpsertWithoutSwitchesInput
}

input VariantUpdateWithoutSwitchDataInput {
  id: ID
  switches: SwitchUpdateManyWithoutDefaultVariantInput
  value: String
}

input VariantUpdateWithoutSwitchesDataInput {
  id: ID
  switch: SwitchUpdateOneWithoutVariantsInput
  value: String
}

input VariantUpdateWithWhereUniqueWithoutSwitchInput {
  data: VariantUpdateWithoutSwitchDataInput!
  where: VariantWhereUniqueInput!
}

input VariantUpsertWithoutSwitchesInput {
  create: VariantCreateWithoutSwitchesInput!
  update: VariantUpdateWithoutSwitchesDataInput!
}

input VariantUpsertWithWhereUniqueWithoutSwitchInput {
  create: VariantCreateWithoutSwitchInput!
  update: VariantUpdateWithoutSwitchDataInput!
  where: VariantWhereUniqueInput!
}

input VariantWhereInput {
  AND: [VariantWhereInput!]
  id: StringFilter
  NOT: [VariantWhereInput!]
  OR: [VariantWhereInput!]
  switch: SwitchWhereInput
  switches: SwitchFilter
  value: StringFilter
}

input VariantWhereUniqueInput {
  id: ID
}
